// For those who want the bleeding edge
buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}

	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2"
	}
}

plugins {
	id "org.sonarqube" version "2.6.2"
	id 'com.github.johnrengelman.shadow' version '2.0.4'
	id 'io.franzbecker.gradle-lombok' version '1.14'
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'idea'

ext.configFile = file('build.properties')
ext.config = parseConfig(configFile)

version = config.version
group = config.group
archivesBaseName = config.archivesBaseName

println "Currently building: Avatar Mod " + project.version + "!"

// Need this here so eclipse task generates correctly.
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8
compileJava {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

// Needs this here so IntelliJ recognizes the assets folder correctly.
idea {
	module {
		inheritOutputDirs = true
	}
}

dependencies {
	//TODO: Update dependencies
	compile files("libs/joml/joml-1.8.1.jar")
	compile files("libs/yaml/snakeyaml-1.16.jar")
}

minecraft {
	version = config.forge
	mappings = config.mappings

	runDir = "run"

	replaceIn 'src/main/java/com/crowsofwar/avatar/AvatarInfo.java'

	replace '@version@', config.version
	replace '@modid@', config.modid
	replace '@mcversion@', project.minecraft.version
	replace '@name@', config.name
}

import org.apache.tools.ant.filters.ReplaceTokens

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff
	from(sourceSets.main.resources.srcDirs) {
		filter ReplaceTokens, tokens: [version: config.version, mcversion: project.minecraft.version, modid: config.modid, name: config.name]
	}
}

jar.classifier = "thin"
shadowJar.classifier = ""

reobf { shadowJar { mappingType = "SEARGE" } }
tasks.reobfShadowJar.mustRunAfter shadowJar

task sourceZip(type: Zip, dependsOn: 'classes') {
	classifier "src"
	from projectDir
	include "src/**/*"

	destinationDir(new File(buildDir, "/libs"))
}

shadowJar {
	configurations = [project.configurations.compile]
}

static def parseConfig(File config) {
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}
